[core]
	abbrev = 7
	autocrlf = false
	bare = false
	hideDotFiles = dotGitOnly
	filemode = true
	logallrefupdates = true
	repositoryformatversion = 0
	editor = nvim 
	pager = delta
[alias]
  # Wip
  wip = !git add . && git commit -m \"wip\"
  amend = !git add --all && git commit --amend --no-edit

	# Status
	s = status -sb
	sf = show --name-status --pretty=""
	
	# Commit helpers
	ci = "!f() { git commit -m \"$*\";}; f"
	ca = "!f() { git add --all && git commit -m \"$*\";}; f" 

	# Checkou to existing branch
	co = checkout

	# Create and checkout to a branch
	cb = "!f() { git checkout -b $1 2> /dev/null && echo Created new branch $1 || `git checkout $1`; }; f"
	
	# Compare local and remote
	ahead = "!sh -c 'echo branch is $(git rev-list --count origin/$0..HEAD) commits ahead $0'"
	behind = "!sh -c 'echo branch is $(git rev-list --count HEAD..origin/$0) commits behind $0'"

	# Log
  l = log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr' 
  la = log --all --graph --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr' 
	
	# Log last commit files
	last = log -1 HEAD --stat --name-status

	# Unstage things
	unstage = reset HEAD --

	# Reset last commit
	undo = reset HEAD^
  
	# Diff
	d = diff 

	# Delete a local branch
	db = branch -D

  # DD = 

	# Delete a remote branch
	db-remote = !sh -c 'git push origin :$0'

	# Delete both the local and remote branches
	db-all = !sh -c 'git db $0 && git db-remote $0' 

	# Remove untracked files and directories
	cln = clean -f -d

	# Search
	search = !git rev-list --all | xargs git grep -F
	
	# Branches logs
	bl = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate

	# Delete all but dev
	chacina = !git branch | grep -v "dev" | grep -v "main" | xargs git branch -D 
	
	# Cherry-pick
	cp = cherry-pick

  # Ammend last commit
  count = !git shortlog -s --grep

	df = "!git hist | awk '{print $2}' | xargs -I {} git diff {}^ {}"
  hist = log --pretty=format:\"%Cgreen%h %Creset%cd %Cblue[%cn] %Creset%s%C(yellow)%d%C(reset)\" --graph --date=relative --decorate --all

	open = "!gh repo view --web"
	yolo = !git commit -m \"$(curl -X GET https://whatthecommit.com/index.txt)\"
[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
	ui = auto
[credential]
	helper = cache --timeout=86400
[filter "lfs"]
	clean = git-lfs clean -- %f
	required = true
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[gc]
	auto = 0
	autodetach = false
[git-pull-request]
	close-default-comment = Merged. Thank you.
	color-display-title-user = cyan
	color-status = cyan
	fetch-auto-update = true
	update-method = rebase
[merge]
	renameLimit = 1000
	conflictstyle = diff3
[pull]
	rebase = true
[push]
	default = matching
[user]
	email = rennandelcastillo@gmail.com
	name = Rennan Prysthon
[init]
	defaultBranch = main
[diff]
	colorMoved = default
[interactive]
	diffFilter = delta --color-only --features=interactive
[delta]
	navigate = true
	features = decorations
[delta "decorations"]
	commit-decoration-style = blue ol
	commit-style = raw
	file-style = omit
	hunk-header-decoration-style = blue box
	hunk-header-file-style = red
	hunk-header-line-number-style = "#067a00"
	hunk-header-style = file line-number syntax
	
